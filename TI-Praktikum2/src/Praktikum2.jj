options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(EG1)

import java.util.HashMap;

public class EG1
{
  private static String URM = new String();
  private static HashMap<String, String > vars = new HashMap<String, String >();
  private static int LineNr = 1;

  private static String addVariable(String name)
  {
    String s = "R" + String.valueOf(vars.size()+1);
    vars.put(name, s);
    System.err.println("Adding Variable: name = "+name +" reg: " + s);	s = String.valueOf(LineNr++)+": " + s + "=0;\n";
	return  s;
  }

  private static String getVariable(String name)
  {
    		if (vars.containsKey(name))
		return vars.get(name);
		else return null;  }
  
  public static void main(String args []) throws ParseException
  {
    EG1 parser = new EG1(System.in);

   // while (true)
    {
      System.out.println("Reading from standard input....");
      System.out.print("Enter an WHILE0 Program\":");
	  //EG1.ReInit(System.in);

      try
      {
        URM = EG1.program();
        System.out.println("#######URM PROGRAM BEGIN#######\n"+URM+"#######URM PROGRAM END########");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        EG1.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //break;
      }
    }
  }
}

PARSER_END(EG1)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
	// Keywords
	  < BEGIN : "begin" >
	| < END : "end" >
	| < DO : "do" >
	| < WHILE : "while">
	
	// Operators
	| < ADD : "+"> 
	
	// Diverse
	| < ASSIGN : "=" >
 
 
	// Conditions
	| < NOASSIGN : "!=" >
	
	
	// Other terminal symbols
	| < NULL : "0" >
	| < ONE : "1" >
 	| < SEMI :";" >
 	| < LBRK : "(" >
 	| < RBRK : ")" >
 	| < IN: "in" >
 	| < OUT: "out" >
 	| < COMMA: "," >
    | < IDENT: ["a"-"z" , "A"-"Z"](["a"-"z" , "A"-"Z" , "0"-"9"])* >		
}

String program() :
{ String program = "", invardecl = "", outvardecl = "", helpvardecl = "", sequ = ""; }
{
  < IDENT > < LBRK > < IN >  (invardecl = inVarList())?  { program += invardecl; } < SEMI > outvardecl = outVar() { program += outvardecl; } < RBRK > < SEMI >
  < IDENT > < LBRK > (helpvardecl = helpVarList())? { program += helpvardecl; } < RBRK > < SEMI >
  
  sequ = sequence() { program += sequ; } < EOF >
  {
    return program +String.valueOf(EG1.LineNr++)+": ;\n";
  }
| < EOF >
  {
    return program;
  }
}

String sequence() :
{ String s1 = "", s3 = "", s2 = ""; }
{
  s1 = statement()
  (
    s3 = statement()    { s2 += s3; }
  )*
{
 //System.err.println("return s1:"+s1+" s2:"+s2);
 return s1 + s2;}
 // ((s1 = statement()) (s2 = statement())?)+
//  {//    return s1 + s2;
//  }
}

String inVar() :
{ String s1 = ""; }
{
	< IDENT > { s1 = addVariable(token.image); return s1;  }
}

String inVarList() :
{ String s1 = "", s2 = ""; }
{ s1 = inVar() (< COMMA > s2 = inVarList())? { return s1 + s2; }}

String outVar() :
{ Token t; }
{
	<  OUT > t = < IDENT > { return addVariable(t.image); }
}

String helpVar() :
{}
{
	< IDENT > { return addVariable(token.image); }
}

String helpVarList() :
{ String s1 = "", s2 = ""; }
{
 s1 = helpVar() (< COMMA > s2 = helpVarList())? { return s1 + s2; }
}

String statement() :
{ String s1 = "", s2 = "" ; int linenr = EG1.LineNr; }
{
 s2 = While() { s1 += s2 ; return s1; }
| s2 = AssignmentorIncrement() {
   s1 += s2 ;
   return s1;  }
}

String AssignmentorIncrement() :
{ String s1 = "", s2 = ""; Token t1; int linenr = EG1.LineNr; }
{
  t1 = < IDENT > <ASSIGN > (s1 = Assignment() | s2 = Increment(getVariable(t1.image))) < SEMI >  {
	if(s1!="")
    return String.valueOf(EG1.LineNr++) +": "+getVariable(t1.image) + "=" + s1 + ";\n";
    else if (s2!="")
    return s2;  }
}

String Assignment() :
{}
{
  <NULL >  {
    return token.image;  }
}

String Increment(String name) :
{ Token t; int linenr = EG1.LineNr; }
{
  t = <IDENT > <ADD > <ONE >
  {
   // System.err.println("Increment Name: "+name+"t.image: "+getVariable(t.image)); 
	if(name==getVariable(t.image))
    return String.valueOf(EG1.LineNr++)+": "+getVariable(t.image) + "++;\n";
    else
    {		return String.valueOf(EG1.LineNr++)+": COPY("+name+","+getVariable(t.image)+");\n"+String.valueOf(EG1.LineNr++) +": "  +name+"++;\n";
    }
  }
}

String While() :
{ String s1 = "", result = ""; int linenr = EG1.LineNr; int oldnr = 0, gotonr = 0; Token v, w; }
{
  { oldnr = EG1.LineNr++; }    
  < WHILE > v = <IDENT > <NOASSIGN > w = <IDENT > <DO > <BEGIN > (s1 = sequence())* < END >  {
     result = String.valueOf(oldnr) + ": if "+getVariable(v.image)+"=="+getVariable(w.image)+ " goto templabel\n" +s1 +String.valueOf(EG1.LineNr++)+ ": goto "+ String.valueOf(oldnr)+";\n";
	 return result.replace("templabel", String.valueOf(EG1.LineNr));
  }
}

